{"version":3,"sources":["components/Header.js","components/Apicalls.js","components/Question.js","components/Login.js","components/Error.js","components/AskQuestion.js","components/AddAnswer.js","components/Search.js","components/Edit.js","components/Profile.js","index.js"],"names":["Header","props","state","isLoggedIn","username","userid","searchText","e","this","setState","target","value","trim","length","window","location","href","button","classes","ButtonGroup","color","Button","onClick","className","menuButton","handleLogout","handleLogin","root","AppBar","style","position","top","appbar","Toolbar","Typography","variant","title","textDecoration","search","searchIcon","InputBase","onChange","onSearchTextChange","placeholder","inputRoot","input","inputInput","inputProps","searchQuery","handleNewQuestion","Component","withStyles","theme","backgroundColor","flexGrow","fontFamily","marginRight","spacing","fontWeight","link","marginLeft","borderRadius","shape","fade","palette","common","white","width","breakpoints","up","padding","height","pointerEvents","display","alignItems","justifyContent","paddingLeft","transition","transitions","create","getCall","data","a","axios","get","api","response","console","error","postCall","post","body","Question","componentDidMount","fetchQuestionData","questionid","quesId","getQuestionData","oneFetchStatus","question","answers","token","match","params","quesid","Paper","paper","questionsList","Grid","container","key","grid","direction","justify","item","xs","user","to","moment","created","fromNow","answerQuestion","map","answer","index","answerid","Box","component","my","whiteSpace","Divider","dividerClass","fontSize","marginTop","border","textAlign","Login","handleCloseModal","loginModalOpen","hideModal","errorMessage","password","handleLoginData","handleNewUser","showModal","Modal","open","aria-labelledby","aria-describedby","modal","closeAfterTransition","margin","TextField","textfield","size","label","type","leftMargin","marginBottom","Error","AskQuestion","handleAskQuestion","isDone","multiline","rows","AddAnswer","handleAddAnswer","Search","fetchQuestions","apiCallUrl","querytype","localeCompare","currentOffset","query","responseAllQuestions","allFetchStatus","questions","noMoreData","headingDynamic","noWrap","Edit","handleEditConfirm","defaultValue","editTypeLabel","editid","editId","editType","Profile","hideEditModal","showEditModal","handlePasswordUpdate","passwordOld","passwordNew","errorPassword","errorMessagePassword","passwordConfirm","passwordold","passwordnew","handleAnswerDelete","filter","idx","parseInt","handleQuestionDelete","handleAnswerEdit","handleQuestionEdit","fetchAllData","responseAllUserData","sm","App","verifyToken","responseTokenVerify","tokenValid","showLoginModal","showAskQuestionModal","showAnswerModal","document","cookie","split","forEach","c","replace","Date","toUTCString","cookies","set","path","bind","exact","render","AppWithCookies","withCookies","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6885637d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n    AppBar,\r\n    Toolbar,\r\n    Typography,\r\n    Button,\r\n    InputBase,\r\n    ButtonGroup\r\n} from \"@material-ui/core\";\r\nimport {\r\n    withStyles,\r\n    fade\r\n} from \"@material-ui/core/styles\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nconst styles = (theme)=>({\r\n    appbar :{\r\n        backgroundColor : \"#103070\"\r\n    },\r\n    root : {\r\n        flexGrow : 1\r\n    },\r\n    menuButton : {\r\n        color : \"#FDFDFD\",\r\n        fontFamily : 'Open Sans',\r\n        marginRight : theme.spacing(1)\r\n    },\r\n    title : {\r\n        color : \"#FDFDFD\",\r\n        fontWeight : 500,\r\n        fontFamily : 'Open Sans',\r\n        flexGrow : 1\r\n    },\r\n    link : {        \r\n        color : \"#FDFDFD\",\r\n        fontWeight : 500,\r\n        marginLeft : \"10px\",\r\n        fontFamily : 'Open Sans',\r\n    },\r\n    search: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        '&:hover': {\r\n          backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginRight: theme.spacing(2),\r\n        marginLeft: 0,\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n          marginLeft: theme.spacing(3),\r\n          width: 'auto',\r\n        },\r\n    },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    inputRoot: {\r\n        color: 'inherit',\r\n    },\r\n    inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n        transition: theme.transitions.create('width'),\r\n        width: '100%',\r\n        [theme.breakpoints.up('md')]: {\r\n          width: '20ch',\r\n        },\r\n    },\r\n});\r\n\r\nclass Header extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            isLoggedIn : props.isLoggedIn,\r\n            username : props.username,\r\n            userid : props.userid,\r\n            searchText : \"\"\r\n        }\r\n    }\r\n    onSearchTextChange(e){\r\n        this.setState({\r\n            searchText : e.target.value.trim()\r\n        })\r\n    }\r\n    searchQuery(){\r\n        if(this.state.searchText.length === 0) {\r\n            return;\r\n        }\r\n        window.location.href = `/s/q/${this.state.searchText}`;\r\n    }\r\n    componentWillReceiveProps(props){\r\n        this.setState({\r\n            isLoggedIn : props.isLoggedIn,\r\n            username : props.username,\r\n            userid : props.userid\r\n        });\r\n    }\r\n    render() {\r\n        const {classes} = this.props;\r\n        const isLoggedIn = this.state.isLoggedIn;\r\n        let button;\r\n        if (!isLoggedIn){\r\n            button = (<Button className={classes.menuButton} onClick={()=>{this.props.handleLogin()}} color=\"primary\">{\"Login\"}</Button>);  \r\n        } else {\r\n        button = (\r\n            <ButtonGroup color=\"primary\">\r\n                <Button color=\"inherit\" onClick = {()=>{window.location.href=`/profile`}}>{\"Profile\"}</Button>\r\n                <Button className={classes.menuButton} onClick={()=>{this.props.handleLogout()}} color=\"inherit\">{this.state.username}{this.state.userid}</Button>\r\n            </ButtonGroup>\r\n        );\r\n        }\r\n        return (\r\n            <div className={classes.root}>\r\n                <AppBar style={{position:\"fixed\",top: \"0\"}} className={classes.appbar} >\r\n                    <Toolbar>\r\n                        {/* <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon />\r\n                        </IconButton> */}\r\n                            <Typography variant=\"h6\" className={classes.title}>\r\n                                <a className={classes.title} style={{textDecoration:\"none\"}} href={\"/\"}>\r\n                                    {\"askAnything\"}\r\n                                </a>\r\n                            </Typography>\r\n                        <div className={classes.search}>\r\n                            <div className={classes.searchIcon}>\r\n                                <SearchIcon />\r\n                            </div>\r\n                            <InputBase\r\n                                onChange = {(e)=>{this.onSearchTextChange(e)}}\r\n                                placeholder=\"Search…\"\r\n                                classes={{\r\n                                    root: classes.inputRoot,\r\n                                    input: classes.inputInput,\r\n                                }}\r\n                                inputProps={{ 'aria-label': 'search' }}\r\n                            />\r\n                            <Button onClick={()=>{this.searchQuery()}}>\r\n                                Search\r\n                            </Button>\r\n                        </div>\r\n                        <Button className={classes.menuButton} onClick={()=>{this.props.handleNewQuestion()}} variant=\"contained\" color=\"secondary\">{\"Ask Question\"}</Button>\r\n                        {button}\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nHeader.propTypes = {\r\n    classes : PropTypes.object.isRequired\r\n}\r\nexport default withStyles(styles)(Header);\r\n","import axios from \"axios\";\r\nconst myServerAddr = \"/api\";\r\nexport const getCall = async (data)=>{\r\n    try{\r\n        const response = await axios.get(myServerAddr+data.api);\r\n        return response.data;\r\n    }catch (error) {\r\n        console.error(error);\r\n        return null;\r\n    }\r\n}\r\nexport const postCall = async (data)=>{\r\n    try{\r\n        const response = await axios.post(myServerAddr+data.api,data.body);\r\n        return response.data;\r\n    }catch (error) {\r\n        console.error(error);\r\n        return null;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport {\r\n    Grid,\r\n    Typography,\r\n    Button,\r\n    Paper,\r\n    Divider,\r\n    Box\r\n} from \"@material-ui/core\";\r\nimport {\r\n    withStyles\r\n} from \"@material-ui/core/styles\";\r\nimport {getCall} from \"./Apicalls.js\";\r\n\r\nconst styles = (theme)=>({\r\n    appbar :{\r\n        backgroundColor : \"#103070\"\r\n    },\r\n    root : {\r\n        flexGrow : 1\r\n    },\r\n    menuButton : {\r\n        color : \"#FDFDFD\",\r\n        fontFamily : 'Open Sans',\r\n        marginRight : theme.spacing(1)\r\n    },\r\n    title : {\r\n        fontWeight : 800,\r\n        fontSize : \"18px\",\r\n        padding : theme.spacing(2),\r\n        color: \"#103070\",\r\n        fontFamily : \"Open Sans\"\r\n    },\r\n    question :{\r\n        fontFamily : \"Open Sans\",\r\n        color : \"#103070\",\r\n        fontWeight : \"600\",\r\n    },\r\n    answer :{\r\n        marginTop : theme.spacing(1), \r\n        fontFamily : \"Open Sans\",\r\n        fontWeight : \"600\",\r\n    },\r\n    user : {\r\n        fontFamily : \"Open Sans\",\r\n        fontSize : \"80%\",\r\n        color : \"#666666\",\r\n        fontWeight : \"400\"\r\n    },\r\n    grid : {\r\n        padding : theme.spacing(3)\r\n    },\r\n    questionsList :{\r\n        border : \"1px solid rgba(0,0,0,0.1)\",\r\n        borderRadius : \"10px\",\r\n    },\r\n    dividerClass : {\r\n        color : \"rgba(0,0,0,0.1)\"\r\n    },\r\n    paper: {\r\n        marginLeft : theme.spacing(1),\r\n        marginTop : theme.spacing(1), \r\n        marginRight : theme.spacing(1),\r\n        padding: theme.spacing(3),\r\n        textAlign: 'left',\r\n        fontFamily : \"Open Sans\",\r\n        whiteSpace: 'nowrap',\r\n      },\r\n});\r\n\r\nclass Question extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            token : props.token,\r\n            isLoggedIn : props.isLoggedIn,\r\n            username : props.username,\r\n            userid : props.userid,\r\n            questionid : props.match.params.quesid,\r\n            question : {},\r\n            answers : []\r\n        }\r\n    }\r\n    componentDidMount = async () => {\r\n        this.fetchQuestionData(this.state.questionid);\r\n    }\r\n    fetchQuestionData = async (quesId) => {\r\n        let getQuestionData = await getCall({api:`/q/${quesId}`});\r\n        if(getQuestionData && getQuestionData.oneFetchStatus){\r\n            this.setState({\r\n                question: getQuestionData.question,\r\n                answers : [...getQuestionData.answers]\r\n            });\r\n        }else{            \r\n            window.location.href = \"/error\"\r\n        }\r\n    }\r\n    componentWillReceiveProps(props){\r\n        this.setState({\r\n            token : props.token,\r\n            isLoggedIn : props.isLoggedIn,\r\n            username : props.username,\r\n            userid : props.userid\r\n        });\r\n    }\r\n    render() {\r\n        const {classes} = this.props;        \r\n        return (\r\n            <div className={classes.root}>\r\n                <Paper className = {classes.paper}>\r\n                    <div className = {classes.questionsList}>\r\n                    <Grid container\r\n                            key = {this.state.question.questionid}\r\n                            className={classes.grid}\r\n                            direction=\"row\"\r\n                            justify=\"space-between\"\r\n                            spacing={1}>\r\n                            <Grid item key={\"questionbody\"} xs={12}>\r\n                                <Typography className={classes.title}>\r\n                                {this.state.question.question}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid key={`${\"questionlink\"}_username`} item xs={12}>\r\n                                <Typography className={classes.user}>\r\n                                    {this.state.answers.length}{` Answer${((this.state.answers.length===1)?\"\":\"s\")} `}{'\\u2022'}\r\n                                    <Link style={{color:\"#103070\",textDecoration:\"none\"}} to={`/s/u/${this.state.question.username}`}>\r\n                                        {\" \"}{this.state.question.username}{\" asked\"}\r\n                                    </Link>\r\n                                    {` ${moment(this.state.question.created).fromNow()} `}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Typography className={classes.key}>\r\n                                        <Button color = \"primary\" onClick = {()=>{this.props.answerQuestion(this.state.questionid)}} variant=\"contained\">Answer</Button>\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        </div>\r\n                    </Paper>\r\n                    {this.state.answers.length > 0 && \r\n                    <Paper className={classes.paper}>\r\n                        <Typography className={classes.title}>\r\n                            {\"ANSWERS\"}\r\n                        </Typography>\r\n                        <div className={classes.questionsList}>\r\n                        {this.state.answers.map((answer,index)=>{\r\n                            return (\r\n                            <div key = {`${answer.answerid}_basediv`} >\r\n                            <Grid container\r\n                                key = {`${answer.answerid}_basegrid`}\r\n                                className={classes.grid}\r\n                                direction=\"row\"\r\n                                justify=\"space-between\"\r\n                                spacing={1}>\r\n                                <Grid key={`${answer.answerid}_answerid`} item xs={12}>\r\n                                    <Typography className={classes.answer}>\r\n                                        <Box component=\"span\" my={2} whiteSpace=\"normal\">\r\n                                            {answer.answer}\r\n                                        </Box>\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid key={`${answer.answerid}_username`} item xs={12}>\r\n                                    <Typography className={classes.user}>\r\n                                    <Link style={{color:\"#103070\",textDecoration:\"none\"}} to={`/s/u/${answer.username}`}>\r\n                                        {answer.username}{\" answered\"}\r\n                                    </Link>\r\n                                    {` ${moment(answer.created).fromNow()} `}    \r\n                                    </Typography>\r\n                                <Typography className={classes.user}>\r\n                                        \r\n                                </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                            {index!==this.state.answers.length-1 && \r\n                                    <Divider className={classes.dividerClass} key={`${answer.answerid}_divider`} />\r\n                                }\r\n                            </div>    \r\n                        )})\r\n                        }\r\n                        </div>\r\n                    </Paper>\r\n                    }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nQuestion.propTypes = {\r\n    classes : PropTypes.object.isRequired\r\n}\r\nexport default withStyles(styles)(Question);\r\n","import React, { Component } from 'react'\r\nimport {\r\n    Button,\r\n    Modal,\r\n    Typography,\r\n    TextField,\r\n    Grid\r\n} from \"@material-ui/core\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n    withStyles\r\n} from \"@material-ui/core/styles\";\r\nimport {postCall} from \"./Apicalls.js\"; \r\nconst styles = (theme)=>({\r\n    modal: {\r\n        display: 'flex',\r\n        marginBottom : \"200px\",\r\n        justifyContent: 'center'\r\n      },\r\n    root :{\r\n        padding : theme.spacing(4),\r\n        backgroundColor : \"#FDFDFD\"\r\n    },\r\n    grid :{\r\n        padding : theme.spacing(1)\r\n    },\r\n    title : {\r\n        fontWeight : 600,\r\n        fontFamily : \"Open Sans\"\r\n    },\r\n    textfield :{\r\n        width : \"100%\"\r\n    }\r\n});\r\n\r\nclass Login extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            loginModalOpen : props.showModal,\r\n            username : \"\",\r\n            password : \"\",\r\n            error : false,\r\n            errorMessage : \"\"\r\n        }\r\n    }\r\n    componentWillReceiveProps(props){\r\n        this.setState({\r\n            loginModalOpen : props.showModal\r\n        });\r\n    }\r\n    handleCloseModal = async () => {\r\n        this.setState({\r\n            loginModalOpen : false,\r\n            error : false\r\n        });\r\n        this.props.hideModal();\r\n    }\r\n    handleLogin = async ()=>{\r\n        if(this.state.username.length === 0){\r\n            this.setState({\r\n                error : true,\r\n                errorMessage : \"Username length should be greater than 0!\"\r\n            });\r\n            return;\r\n        }\r\n        //we will call to backend and get new token after verifying username and password\r\n        let response = await postCall({body:{username: this.state.username , password : this.state.password},api:\"/u/login\"});\r\n        if(response){\r\n            if(!response.isLoggedIn){\r\n                this.setState({\r\n                    error : true,\r\n                    errorMessage : response.errorMessage\r\n                })\r\n            }else{\r\n                this.setState({\r\n                    error : false\r\n                });\r\n                this.props.handleLoginData(response);\r\n                this.handleCloseModal();\r\n            }\r\n        }else{\r\n            this.setState({\r\n                error : true,\r\n                errorMessage : \"Unexpected Error Occurred!\"\r\n            });\r\n        }\r\n    }\r\n    handleNewUser = async ()=>{\r\n        if(this.state.username.length === 0){\r\n            this.setState({\r\n                error : true,\r\n                errorMessage : \"Username length should be greater than 0!\"\r\n            });\r\n            return;\r\n        }\r\n        let response = await postCall({body:{username: this.state.username , password : this.state.password},api:\"/u/register\"});\r\n        if(response){\r\n            if(!response.isLoggedIn){\r\n                this.setState({\r\n                    error : true,\r\n                    errorMessage : response.errorMessage\r\n                });\r\n            }else{\r\n                this.setState({\r\n                    error : false\r\n                });\r\n                this.props.handleLoginData(response);\r\n                this.handleCloseModal();\r\n            }\r\n        }else{\r\n            this.setState({\r\n                error : true,\r\n                errorMessage : \"Unexpected Error Occurred!\"\r\n            });\r\n        }\r\n    }\r\n    render() {\r\n        const {classes} = this.props;\r\n        return (\r\n            <div>\r\n                <Modal\r\n                open={this.props.showModal}\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                closeAfterTransition\r\n                >\r\n                <div className = {classes.root} style={{borderRadius: \"10px\",margin:'auto',width:'60%', backgroundColor:\"white\"}}>\r\n                <Typography className={classes.title}>\r\n                    Login\r\n                </Typography>\r\n                <Grid container\r\n                    className={classes.grid}\r\n                    direction=\"row\"\r\n                    justify=\"space-between\"\r\n                    spacing={1}>\r\n                    <Grid item xs={12}>\r\n                        <TextField className={classes.textfield} size=\"small\" label=\"Username\" onChange = {(e)=>{this.setState({username : e.target.value})}} variant=\"outlined\"/>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField type=\"password\" className={classes.textfield} size=\"small\" label=\"Password\" onChange = {(e)=>{this.setState({password : e.target.value})}} variant=\"outlined\"/>\r\n                    </Grid>\r\n                    {this.state.error && \r\n                    <Grid item xs={12} style={{fontSize:\"70%\",fontFamily: \"Open Sans\",color : \"red\"}}>{this.state.errorMessage}</Grid>}\r\n                    <Grid item xs={8}>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={(e)=>this.handleLogin(e)}>\r\n                            Login\r\n                        </Button>\r\n                        <Button style={{marginLeft:\"2px\"}} variant=\"contained\" color=\"primary\" onClick={(e)=>this.handleNewUser(e)}>\r\n                            New User\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Button style={{leftMargin:\"100px\"}} onClick={()=>{this.handleCloseModal()}} variant=\"contained\" color=\"secondary\">\r\n                            Cancel\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                </div>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nLogin.propTypes = {\r\n    classes : PropTypes.object.isRequired\r\n}\r\nexport default withStyles(styles)(Login);\r\n","import React, { Component } from 'react'\r\n\r\nclass Error extends Component {\r\n    render() {\r\n        return (\r\n            <div style={{fontFamily:\"Open Sans\",fontSize:\"30px\",textAlign : \"center\",marginTop:\"20%\"}}>\r\n                404 NOT FOUND!\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Error\r\n","import React, { Component } from 'react'\r\nimport {\r\n    Button,\r\n    Modal,\r\n    Typography,\r\n    TextField,\r\n    Grid\r\n} from \"@material-ui/core\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n    withStyles\r\n} from \"@material-ui/core/styles\";\r\nimport {postCall} from \"./Apicalls.js\"; \r\nconst styles = (theme)=>({\r\n    modal: {\r\n        display: 'flex',\r\n        marginBottom : \"200px\",\r\n        justifyContent: 'center'\r\n      },\r\n    root :{\r\n        padding : theme.spacing(4),\r\n        backgroundColor : \"#FDFDFD\"\r\n    },\r\n    grid :{\r\n        padding : theme.spacing(1)\r\n    },\r\n    title : {\r\n        fontWeight : 600,\r\n        fontFamily : \"Open Sans\"\r\n    },\r\n    textfield :{\r\n        width : \"100%\"\r\n    }\r\n});\r\n\r\nclass AskQuestion extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            question : \"\",\r\n            error : false,\r\n            errorMessage : \"\",\r\n            token : props.token\r\n        }\r\n    }\r\n    componentWillReceiveProps(props){\r\n        this.setState({\r\n            token : props.token\r\n        });\r\n    }\r\n    handleCloseModal = async () => {\r\n        this.setState({\r\n            error : false,\r\n            question : \"\"\r\n        });\r\n        this.props.hideModal();\r\n    }\r\n    handleAskQuestion = async ()=>{\r\n        if(this.state.question.length === 0){\r\n            this.setState({\r\n                error : true,\r\n                errorMessage : \"Question length should be greater than 0!\"\r\n            });\r\n            return;\r\n        }\r\n        let response = await postCall({body:{token : this.state.token , question : this.state.question},api:\"/u/r/AskQuestion\"});\r\n        if(response){\r\n            if(!response.isDone){\r\n                this.setState({\r\n                    error : true,\r\n                    errorMessage : response.errorMessage\r\n                })\r\n            }else{\r\n                this.setState({\r\n                    error : false\r\n                });\r\n                this.handleCloseModal();\r\n            }\r\n        }else{\r\n            this.setState({\r\n                error : true,\r\n                errorMessage : \"Unexpected Error Occurred!\"\r\n            });\r\n        }\r\n    }\r\n    render() {\r\n        const {classes} = this.props;\r\n        return (\r\n            <div>\r\n                <Modal\r\n                open={this.props.showModal}\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                closeAfterTransition\r\n                >\r\n                <div className = {classes.root} style={{borderRadius: \"10px\",margin:'auto',width:'60%', backgroundColor:\"white\"}}>\r\n                <Typography className={classes.title}>\r\n                    AskQuestion\r\n                </Typography>\r\n                <Grid container\r\n                    className={classes.grid}\r\n                    direction=\"row\"\r\n                    justify=\"space-between\"\r\n                    spacing={1}>\r\n                    <Grid item xs={12}>\r\n                        <TextField multiline rows={4} className={classes.textfield} size=\"small\" label=\"Question\" onChange = {(e)=>{this.setState({question : e.target.value})}} variant=\"outlined\"/>\r\n                    </Grid>\r\n                    {this.state.error && \r\n                    <Grid item xs={12} style={{fontSize:\"70%\",fontFamily: \"Open Sans\",color : \"red\"}}>{this.state.errorMessage}</Grid>}\r\n                    <Grid item xs={8}>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={(e)=>this.handleAskQuestion(e)}>\r\n                            AskQuestion\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Button style={{leftMargin:\"100px\"}} onClick={()=>{this.handleCloseModal()}} variant=\"contained\" color=\"secondary\">\r\n                            Cancel\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                </div>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nAskQuestion.propTypes = {\r\n    classes : PropTypes.object.isRequired\r\n}\r\nexport default withStyles(styles)(AskQuestion);\r\n","import React, { Component } from 'react'\r\nimport {\r\n    Button,\r\n    Modal,\r\n    Typography,\r\n    TextField,\r\n    Grid\r\n} from \"@material-ui/core\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n    withStyles\r\n} from \"@material-ui/core/styles\";\r\nimport {postCall} from \"./Apicalls.js\"; \r\nconst styles = (theme)=>({\r\n    modal: {\r\n        display: 'flex',\r\n        marginBottom : \"200px\",\r\n        justifyContent: 'center'\r\n      },\r\n    root :{\r\n        padding : theme.spacing(4),\r\n        backgroundColor : \"#FDFDFD\"\r\n    },\r\n    grid :{\r\n        padding : theme.spacing(1)\r\n    },\r\n    title : {\r\n        fontWeight : 600,\r\n        fontFamily : \"Open Sans\"\r\n    },\r\n    textfield :{\r\n        width : \"100%\"\r\n    }\r\n});\r\n\r\nclass AddAnswer extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            answer : \"\",\r\n            questionid : props.match.params.quesid,\r\n            token : props.token,\r\n            error : false,\r\n            errorMessage : \"\"\r\n        }\r\n    }\r\n    componentWillReceiveProps(props){\r\n        this.setState({\r\n            token : props.token,\r\n            questionid : props.match.params.quesid\r\n        });\r\n    }\r\n    handleCloseModal = async () => {\r\n        this.setState({\r\n            error : false,\r\n            questionid : null,\r\n            answer : \"\"\r\n        });\r\n        this.props.hideModal();\r\n    }\r\n    handleAddAnswer = async ()=>{\r\n        if(this.state.answer.length === 0){\r\n            this.setState({\r\n                error : true,\r\n                errorMessage : \"Answer length should be greater than 0!\"\r\n            });\r\n            return;\r\n        }\r\n        let response = await postCall({body:{token : this.state.token,questionid : this.state.questionid,answer : this.state.answer},api:\"/u/r/addanswer\"});\r\n        if(response){\r\n            if(!response.isDone){\r\n                this.setState({\r\n                    error : true,\r\n                    errorMessage : response.errorMessage\r\n                })\r\n            }else{\r\n                this.setState({\r\n                    error : false\r\n                });\r\n                this.handleCloseModal();\r\n            }\r\n        }else{\r\n            this.setState({\r\n                error : true,\r\n                errorMessage : \"Unexpected Error Occurred!\"\r\n            });\r\n        }\r\n    }\r\n    render(){\r\n        const {classes} = this.props;\r\n        return (\r\n            <div>\r\n                <Modal\r\n                open={this.props.showModal}\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                closeAfterTransition\r\n                >\r\n                <div className = {classes.root} style={{borderRadius: \"10px\",margin:'auto',width:'60%', backgroundColor:\"white\"}}>\r\n                <Typography className={classes.title}>\r\n                    AddAnswer\r\n                </Typography>\r\n                <Grid container\r\n                    className={classes.grid}\r\n                    direction=\"row\"\r\n                    justify=\"space-between\"\r\n                    spacing={1}>\r\n                    <Grid item xs={12}>\r\n                        <TextField multiline rows={4} className={classes.textfield} size=\"small\" label=\"Answer\" onChange = {(e)=>{this.setState({answer : e.target.value})}} variant=\"outlined\"/>\r\n                    </Grid>\r\n                    {this.state.error && \r\n                    <Grid item xs={12} style={{fontSize:\"70%\",fontFamily: \"Open Sans\",color : \"red\"}}>{this.state.errorMessage}</Grid>}\r\n                    <Grid item xs={8}>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={(e)=>this.handleAddAnswer(e)}>\r\n                            Add Answer\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Button style={{leftMargin:\"100px\"}} onClick={()=>{this.handleCloseModal()}} variant=\"contained\" color=\"secondary\">\r\n                            Cancel\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                </div>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nAddAnswer.propTypes = {\r\n    classes : PropTypes.object.isRequired\r\n}\r\nexport default withStyles(styles)(AddAnswer);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport moment from 'moment';\r\nimport {\r\n    Grid,\r\n    Typography,\r\n    Button,\r\n    Paper,\r\n    Divider\r\n} from \"@material-ui/core\";\r\nimport {\r\n    withStyles\r\n} from \"@material-ui/core/styles\";\r\nimport {getCall} from \"./Apicalls.js\";\r\n\r\nconst styles = (theme)=>({\r\n    root : {\r\n        flexGrow : 1\r\n    },\r\n    title : {\r\n        fontWeight : 800,\r\n        fontSize : \"18px\",\r\n        padding : theme.spacing(2),\r\n        color: \"#103070\",\r\n        fontFamily : \"Open Sans\"\r\n    },\r\n    question :{\r\n        fontFamily : \"Open Sans\",\r\n        color : \"#103070\",\r\n        fontWeight : \"600\",\r\n    },\r\n    answer :{\r\n        marginTop : theme.spacing(1), \r\n        fontFamily : \"Open Sans\",\r\n        fontWeight : \"600\",\r\n    },\r\n    user : {\r\n        fontFamily : \"Open Sans\",\r\n        fontSize : \"80%\",\r\n        color : \"#666666\",\r\n        fontWeight : \"400\"\r\n    },\r\n    grid : {\r\n        padding : theme.spacing(3)\r\n    },\r\n    questionsList :{\r\n        border : \"1px solid rgba(0,0,0,0.1)\",\r\n        borderRadius : \"10px\",\r\n    },\r\n    dividerClass : {\r\n        color : \"rgba(0,0,0,0.1)\"\r\n    },\r\n    paper: {\r\n        marginLeft : theme.spacing(1),\r\n        marginTop : theme.spacing(1), \r\n        marginRight : theme.spacing(1),\r\n        padding: theme.spacing(3),\r\n        textAlign: 'left',\r\n        fontFamily : \"Open Sans\",\r\n        whiteSpace: 'nowrap',\r\n      },\r\n});\r\n\r\nclass Search extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            query : props.match.params.query || \"\",\r\n            querytype : props.querytype, // query type will be q/s/ ==> a/  /s/q   /s/u/\r\n            questions : [],\r\n            currentOffset : 0,\r\n            noMoreData : false\r\n        }\r\n    }\r\n    componentDidMount = async () => {\r\n        await this.fetchQuestions();\r\n    }\r\n    fetchQuestions = async () => {\r\n        let apiCallUrl;\r\n        if( this.state.querytype.localeCompare(\"a\") === 0){\r\n            apiCallUrl = `/q/s/${this.state.querytype}/${this.state.currentOffset}`;\r\n        }else{\r\n            apiCallUrl = `/q/s/${this.state.querytype}/${this.state.currentOffset}/${this.state.query}`;\r\n        }\r\n        let responseAllQuestions = await getCall({api:apiCallUrl});\r\n        this.setState({\r\n            currentOffset : this.state.currentOffset+1\r\n        });\r\n        if(responseAllQuestions && responseAllQuestions.allFetchStatus){\r\n            this.setState({\r\n                questions : [...this.state.questions,...responseAllQuestions.questions]\r\n            });\r\n            if(responseAllQuestions.questions.length < 10){\r\n                this.setState({\r\n                    noMoreData : true\r\n                })\r\n            }\r\n        }else{\r\n            window.location.href = \"/error\"\r\n        }\r\n    }\r\n    render() {\r\n        const {classes } = this.props;\r\n        let headingDynamic;\r\n        if(this.state.querytype.localeCompare(\"a\")===0){\r\n            headingDynamic = \"ALL RESULTS\";\r\n        }else if(this.state.querytype.localeCompare(\"q\")===0){\r\n            headingDynamic = \"ALL RESULTS FOR QUERY '\"+this.state.query+\"'\";\r\n        }else{\r\n            headingDynamic = \"ALL QUESTIONS BY USER '\"+this.state.query+\"'\";\r\n        }         \r\n        return (\r\n            <div className = {classes.root}>\r\n            <Paper className={classes.paper}>\r\n            {this.state.questions.length===0 &&\r\n                <Typography className={classes.title}>\r\n                    {\"No Results Found!\"}\r\n                </Typography>\r\n            }\r\n            {this.state.questions.length !==0 &&\r\n                <Typography className={classes.title}>\r\n                    {headingDynamic}\r\n                </Typography>\r\n            }\r\n            <div className={classes.questionsList}>\r\n                {this.state.questions.map((question,index)=>{\r\n                    return (\r\n                        <div key = {`${question.questionid}_basediv`}>\r\n                        <Grid container\r\n                            key = {question.questionid}\r\n                            className={classes.grid}\r\n                            direction=\"row\"\r\n                            justify=\"space-between\"\r\n                            spacing={1}>\r\n                            <Grid key={`${question.questionid}_questionid`} item xs={12}>\r\n                            <Link style={{textDecoration:\"none\"}} to={`/q/${question.questionid}`}>\r\n                                <Typography noWrap className={classes.question}>\r\n                                    {question.question}\r\n                                </Typography>\r\n                            </Link>\r\n                            </Grid>\r\n                            <Grid key={`${question.questionid}_username`} item xs={12}>\r\n                                <Typography className={classes.user}>\r\n                                    {question.answers}{` Answer${((question.answers===1)?\"\":\"s\")} `}{'\\u2022'}\r\n                                    <a style={{color:\"#103070\",textDecoration:\"none\"}} href={`/s/u/${question.username}`}>\r\n                                        {\" \"}{question.username}{\" asked\"}\r\n                                    </a>\r\n                                    {` ${moment(question.created).fromNow()} `}\r\n                                </Typography>\r\n                            </Grid> \r\n                        </Grid>\r\n                        {index!==this.state.questions.length-1 && \r\n                                <Divider className={classes.dividerClass} key={`${question.questionid}_divider`} />\r\n                            }\r\n                        </div>\r\n                    )\r\n                })}\r\n                </div>\r\n                {!this.state.noMoreData &&\r\n                <Button style={{margin:\"0 auto\",display:\"block\"}} onClick={()=>{this.fetchQuestions();}} variant=\"contained\" color=\"default\">{\"Load More\"}</Button>\r\n                }\r\n            </Paper>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nSearch.propTypes = {\r\n    classes : PropTypes.object.isRequired\r\n}\r\nexport default withStyles(styles)(Search);","import React, { Component } from 'react'\r\nimport {\r\n    Button,\r\n    Modal,\r\n    Typography,\r\n    TextField,\r\n    Grid\r\n} from \"@material-ui/core\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n    withStyles\r\n} from \"@material-ui/core/styles\";\r\nimport {postCall} from \"./Apicalls.js\"; \r\nconst styles = (theme)=>({\r\n    modal: {\r\n        display: 'flex',\r\n        marginBottom : \"200px\",\r\n        justifyContent: 'center'\r\n      },\r\n    root :{\r\n        padding : theme.spacing(4),\r\n        backgroundColor : \"#FDFDFD\"\r\n    },\r\n    grid :{\r\n        padding : theme.spacing(1)\r\n    },\r\n    title : {\r\n        fontWeight : 600,\r\n        fontFamily : \"Open Sans\"\r\n    },\r\n    textfield :{\r\n        width : \"100%\"\r\n    }\r\n});\r\n\r\nclass Edit extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            defaultValue : props.defaultValue,\r\n            editType : props.editType,\r\n            editTypeLabel : props.editTypeLabel,\r\n            editId : props.editId,\r\n            token : props.token,\r\n            error : false,\r\n            errorMessage : \"\"\r\n        }\r\n    }\r\n    componentWillReceiveProps(props){\r\n        this.setState({\r\n            token : props.token,\r\n            defaultValue : props.defaultValue,\r\n            editType : props.editType,\r\n            editTypeLabel : props.editTypeLabel,\r\n            editId : props.editId,\r\n        });\r\n    }\r\n    handleEditConfirm = async ()=>{\r\n        if(this.state.defaultValue.length === 0){\r\n            this.setState({\r\n                error : true,\r\n                errorMessage : `${this.state.editTypeLabel} length should be greater than 0!`\r\n            });\r\n            return;\r\n        }\r\n        let response = await postCall({body:{token : this.state.token, editid : this.state.editId,value : this.state.defaultValue},api:`/u/r/e/${this.state.editType}`});\r\n        if(response){\r\n            if(!response.isDone){\r\n                this.setState({\r\n                    error : true,\r\n                    errorMessage : response.errorMessage\r\n                })\r\n            }else{\r\n                this.setState({\r\n                    error : false\r\n                });\r\n                this.props.hideModal();\r\n            }\r\n        }else{\r\n            this.setState({\r\n                error : true,\r\n                errorMessage : \"Unexpected Error Occurred!\"\r\n            });\r\n        }\r\n    }\r\n    render(){\r\n        const {classes} = this.props;\r\n        return (\r\n            <div>\r\n                <Modal\r\n                open={this.props.showModal}\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                closeAfterTransition\r\n                >\r\n                <div className = {classes.root} style={{borderRadius: \"10px\",margin:'auto',width:'60%', backgroundColor:\"white\"}}>\r\n                <Typography className={classes.title}>\r\n                    {\"Edit \"}{this.state.editTypeLabel}\r\n                </Typography>\r\n                <Grid container\r\n                    className={classes.grid}\r\n                    direction=\"row\"\r\n                    justify=\"space-between\"\r\n                    spacing={1}>\r\n                    <Grid item xs={12}>\r\n                        <TextField defaultValue={this.state.defaultValue} multiline rows={4} className={classes.textfield} size=\"small\" label={this.state.editTypeLabel} onChange = {(e)=>{this.setState({defaultValue : e.target.value})}} variant=\"outlined\"/>\r\n                    </Grid>\r\n                    {this.state.error && \r\n                    <Grid item xs={12} style={{fontSize:\"70%\",fontFamily: \"Open Sans\",color : \"red\"}}>{this.state.errorMessage}</Grid>}\r\n                    <Grid item xs={8}>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={(e)=>this.handleEditConfirm(e)}>\r\n                            Edit Confirm\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Button style={{leftMargin:\"100px\"}} onClick={()=>{this.props.hideModal()}} variant=\"contained\" color=\"secondary\">\r\n                            Cancel\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                </div>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nEdit.propTypes = {\r\n    classes : PropTypes.object.isRequired\r\n}\r\nexport default withStyles(styles)(Edit);\r\n","import React, { Component } from 'react'\r\nimport { postCall } from \"./Apicalls.js\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport moment from 'moment';\r\nimport Edit from './Edit.js';\r\nimport {\r\n    Grid,\r\n    Typography,\r\n    Button,\r\n    Paper,\r\n    Divider,\r\n    TextField,\r\n    ButtonGroup\r\n} from \"@material-ui/core\";\r\nimport {\r\n    withStyles\r\n} from \"@material-ui/core/styles\";\r\n\r\nconst styles = (theme)=>({\r\n    root : {\r\n        flexGrow : 1\r\n    },\r\n    title : {\r\n        fontWeight : 800,\r\n        fontSize : \"18px\",\r\n        padding : theme.spacing(2),\r\n        color: \"#103070\",\r\n        fontFamily : \"Open Sans\"\r\n    },\r\n    question :{\r\n        fontFamily : \"Open Sans\",\r\n        color : \"#103070\",\r\n        fontWeight : \"600\",\r\n    },\r\n    answer :{\r\n        marginTop : theme.spacing(1), \r\n        fontFamily : \"Open Sans\",\r\n        fontWeight : \"600\",\r\n    },\r\n    user : {\r\n        fontFamily : \"Open Sans\",\r\n        fontSize : \"80%\",\r\n        color : \"#666666\",\r\n        fontWeight : \"400\"\r\n    },\r\n    grid : {\r\n        padding : theme.spacing(3)\r\n    },\r\n    questionsList :{\r\n        border : \"1px solid rgba(0,0,0,0.1)\",\r\n        borderRadius : \"10px\",\r\n    },\r\n    dividerClass : {\r\n        color : \"rgba(0,0,0,0.1)\"\r\n    },\r\n    paper: {\r\n        marginLeft : theme.spacing(1),\r\n        marginTop : theme.spacing(1), \r\n        marginRight : theme.spacing(1),\r\n        padding: theme.spacing(3),\r\n        textAlign: 'left',\r\n        fontFamily : \"Open Sans\",\r\n        whiteSpace: 'nowrap',\r\n      },\r\n    textfield :{\r\n        width : \"100%\"\r\n    }\r\n});\r\n\r\nclass Profile extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            token : props.token,\r\n            username : \"\",\r\n            passwordOld : \"\",\r\n            passwordNew : \"\",\r\n            passwordConfirm : \"\",\r\n            questions : [],\r\n            answers : [],\r\n            errorPassword : false,\r\n            errorMessagePassword : \"\",\r\n            showEditModal : false,\r\n            editType : \"\",\r\n            editTypeLabel : \"\",\r\n            editId : \"\",\r\n            defaultValue : \"\"\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.fetchAllData();\r\n    }\r\n    componentWillReceiveProps(props){\r\n        this.setState({\r\n            token : props.token\r\n        });\r\n        if(props.token === null){\r\n            window.location.href = \"/\";\r\n        }\r\n    }\r\n    hideEditModal = () =>{\r\n        this.setState({\r\n          showEditModal : false,\r\n        })\r\n    }\r\n    handlePasswordUpdate = async ()=>{\r\n        if(this.state.passwordOld.length === 0 || this.state.passwordNew.length === 0){\r\n            this.setState({\r\n                errorPassword : true,\r\n                errorMessagePassword : \"Password can't be empty!\"\r\n            });\r\n        return;\r\n        }\r\n        if(this.state.passwordNew.localeCompare(this.state.passwordOld)===0){\r\n            this.setState({\r\n                errorPassword : true,\r\n                errorMessagePassword : \"Old password and new password can't be same!\"\r\n            });\r\n            return;\r\n        }\r\n        if(this.state.passwordNew.localeCompare(this.state.passwordConfirm) !== 0){\r\n            this.setState({\r\n                errorPassword : true,\r\n                errorMessagePassword : \"Confirmation Password not matched!\"\r\n            });\r\n            return;\r\n        }\r\n        let response = await postCall({body:{token : this.state.token,passwordold:this.state.passwordOld,passwordnew:this.state.passwordNew},api:`/u/r/p`});\r\n        if(response!==null){\r\n            if(response.isDone){\r\n                this.setState({\r\n                    errorPassword : true,\r\n                    errorMessagePassword : \"Password Changed!\"\r\n                })\r\n            }else{\r\n                this.setState({\r\n                    errorPassword : true,\r\n                    errorMessagePassword : response.errorMessage\r\n                })\r\n            }\r\n        }else{\r\n            window.location.href = \"/error\";\r\n        }\r\n    }\r\n    handleAnswerDelete = async (answer) =>{\r\n        let response = await postCall({body:{token : this.state.token, answerid : answer.answerid},api:`/u/r/d/answer`});\r\n        if(response.isDone){\r\n            this.setState({\r\n                answers : [...this.state.answers.filter((e,idx)=>{\r\n                    return parseInt(e.answerid) !== parseInt(answer.answerid);\r\n                })]\r\n            });\r\n        }else{\r\n            window.location.href = '/error';\r\n        }\r\n    }\r\n    handleQuestionDelete = async (question)=>{\r\n        let response = await postCall({body:{token : this.state.token, questionid : question.questionid},api:`/u/r/d/question`});\r\n        if(response.isDone){\r\n            this.setState({\r\n                questions : [...this.state.questions.filter((e,idx)=>{\r\n                    return parseInt(e.questionid) !== parseInt(question.questionid);\r\n                })],\r\n                answers : [...this.state.answers.filter((e,idx)=>{\r\n                    return parseInt(e.questionid) !== parseInt(question.questionid);\r\n                })]\r\n            });\r\n        }else{\r\n            window.location.href = '/error';\r\n        }   \r\n    }\r\n    handleAnswerEdit = async (answer)=>{\r\n        this.setState({\r\n            editType : \"answer\",\r\n            editTypeLabel : \"Answer\",\r\n            editId: answer.answer.answerid,\r\n            defaultValue : answer.answer.answer,\r\n            showEditModal : true\r\n        });\r\n    }\r\n    handleQuestionEdit = async (question)=>{\r\n        this.setState({\r\n            editType : \"question\",\r\n            editTypeLabel : \"Question\",\r\n            editId: question.question.questionid,\r\n            defaultValue : question.question.question,\r\n            showEditModal : true\r\n        });\r\n    }\r\n    fetchAllData = async ()=>{\r\n        let responseAllUserData = await postCall({body:{token:this.state.token},api:\"/u/r/profile\"});\r\n        if(responseAllUserData && responseAllUserData.allFetchStatus){\r\n            this.setState({\r\n                username : responseAllUserData.username,\r\n                questions : [...this.state.questions,...responseAllUserData.questions],\r\n                answers : [...this.state.answers,...responseAllUserData.answers],\r\n            });\r\n        }else{\r\n            window.location.href = \"/error\";\r\n        }\r\n    }\r\n    render() {\r\n        const {classes} = this.props;\r\n        return (\r\n            <div className = {classes.root}>\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={12} sm={12}>\r\n                        <Paper className={classes.paper}>\r\n                            <Typography className={classes.title}>\r\n                                {this.state.username}\r\n                            </Typography>\r\n                        <Grid item xs={6} container spacing={1}>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField type=\"password\" className={classes.textfield} size=\"small\" label=\"Old Password\" onChange = {(e)=>{this.setState({passwordOld : e.target.value})}} variant=\"outlined\"/>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField type=\"password\" className={classes.textfield} size=\"small\" label=\"New Password\" onChange = {(e)=>{this.setState({passwordNew : e.target.value})}} variant=\"outlined\"/>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField type=\"password\" className={classes.textfield} size=\"small\" label=\"Confirm Password\" onChange = {(e)=>{this.setState({passwordConfirm : e.target.value})}} variant=\"outlined\"/>\r\n                            </Grid>\r\n                            <Grid item xs={12}></Grid>\r\n                            {this.state.errorPassword && \r\n                            <Grid item xs={12}style={{fontSize:\"70%\",fontFamily: \"Open Sans\",color : \"red\"}}>{this.state.errorMessagePassword}</Grid>}\r\n                            <Grid item xs={12}>\r\n                                <Button style={{fontFamily : 'Open Sans'}} onClick={()=>{this.handlePasswordUpdate()}} variant=\"contained\" color=\"secondary\">{\"Update Password\"}</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                    {this.state.questions.length !==0 &&\r\n                    <Grid item xs={12} sm={6}>\r\n                    <Paper className={classes.paper}>\r\n                        <Typography className={classes.title}>\r\n                            {\"ALL QUESTIONS ASKED\"}\r\n                        </Typography>\r\n                        <div className={classes.questionsList}>\r\n                            {this.state.questions.map((question,index)=>{\r\n                            return (\r\n                                <div key = {`${question.questionid}_basediv`}>\r\n                                    <Grid container\r\n                                        key = {question.questionid}\r\n                                        className={classes.grid}\r\n                                        direction=\"row\"\r\n                                        justify=\"space-between\"\r\n                                        spacing={1}>\r\n                                        <Grid key={`${question.questionid}_questionid`} item xs={12}>\r\n                                        <Link style={{textDecoration:\"none\"}} to={`/q/${question.questionid}`}>\r\n                                            <Typography noWrap className={classes.question}>\r\n                                                {question.question}\r\n                                            </Typography>\r\n                                        </Link>\r\n                                        </Grid>\r\n                                        <Grid key={`${question.questionid}_username`} item xs={6}>\r\n                                            <Typography className={classes.user}>\r\n                                                {` ${moment(question.created).fromNow()} `}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid key={`${question.questionid}_buttons`} item xs={6}>\r\n                                            <ButtonGroup size=\"small\">\r\n                                                <Button color=\"primary\" variant=\"outlined\" onClick = {()=>{this.handleQuestionEdit({question})}}>{\"Edit\"}</Button>\r\n                                                <Button variant=\"outlined\" onClick={()=>{this.handleQuestionDelete(question)}} color=\"secondary\">{\"Delete\"}</Button>\r\n                                            </ButtonGroup>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    {index!==this.state.questions.length-1 && \r\n                                        <Divider className={classes.dividerClass} key={`${question.questionid}_divider`} />\r\n                                    }\r\n                                </div>\r\n                            )\r\n                        })}\r\n                        </div>\r\n                    </Paper>\r\n                    </Grid>\r\n                    }\r\n                    {this.state.answers.length !==0 &&\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Paper className={classes.paper}>\r\n                        <Typography className={classes.title}>\r\n                                {\"ALL ANSWERS\"}\r\n                            </Typography>\r\n                                <div className={classes.questionsList}>\r\n                                    {this.state.answers.map((answer,index)=>{\r\n                                    return (\r\n                                        <div key = {`${answer.answerid}_basediv`}>\r\n                                            <Grid container\r\n                                                key = {answer.answerid}\r\n                                                className={classes.grid}\r\n                                                direction=\"row\"\r\n                                                justify=\"space-between\"\r\n                                                spacing={1}>\r\n                                                <Grid key={`${answer.answerid}_answer_answerid`} item xs={12}>\r\n                                                <Link style={{textDecoration:\"none\"}} to={`/q/${answer.questionid}`}>\r\n                                                    <Typography noWrap className={classes.question}>\r\n                                                        {answer.answer}\r\n                                                    </Typography>\r\n                                                </Link>\r\n                                                </Grid>\r\n                                                <Grid key={`${answer.answerid}_answer_answer`} item xs={6}>\r\n                                                    <Typography className={classes.user}>\r\n                                                        {` ${moment(answer.created).fromNow()} `}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                                <Grid key={`${answer.answerid}_butttons`} item xs={6}>\r\n                                                <ButtonGroup size=\"small\">\r\n                                                    <Button color=\"primary\" variant=\"outlined\" onClick = {()=>{this.handleAnswerEdit({answer})}}>{\"Edit\"}</Button>\r\n                                                    <Button variant=\"outlined\" onClick={()=>{this.handleAnswerDelete(answer)}} color=\"secondary\">{\"Delete\"}</Button>\r\n                                                </ButtonGroup>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            {index!==this.state.answers.length-1 && \r\n                                                <Divider className={classes.dividerClass} key={`${answer.answerid}_divider_answer`} />\r\n                                            }\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                        </Paper>\r\n                    </Grid>\r\n                    }\r\n                </Grid>\r\n                <Edit showModal={this.state.showEditModal} token={this.state.token} hideModal={()=>this.hideEditModal()} defaultValue={this.state.defaultValue} editId={this.state.editId} editType={this.state.editType} editTypeLabel={this.state.editTypeLabel}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nProfile.propTypes = {\r\n    classes : PropTypes.object.isRequired\r\n}\r\nexport default withStyles(styles)(Profile);\r\n","import React , { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport Header from \"./components/Header.js\"\nimport { withCookies} from \"react-cookie\";\nimport Question from \"./components/Question.js\";\nimport {postCall} from \"./components/Apicalls.js\";\nimport Login from \"./components/Login.js\";\nimport Error from \"./components/Error.js\";\nimport AskQuestion from './components/AskQuestion.js';\nimport AddAnswer from './components/AddAnswer.js';\nimport Search from './components/Search.js';\nimport Profile from \"./components/Profile.js\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      token : props.cookies.get('jwt') || null,\n      isLoggedIn : false,\n      username : \"FAKE ACCOUNT\",\n      showLoginModal : false,\n      showAskQuestionModal : false,\n      showAnswerModal : false\n    }\n    this.verifyToken = this.verifyToken.bind(this);\n  }\n  componentDidMount(){\n    if(this.state.token && !this.state.isLoggedIn){\n      this.verifyToken();\n    }    \n  }\n  verifyToken = async () => {\n    let responseTokenVerify = await postCall({body:{token : this.state.token},api:\"/u/usertoken\"});\n    if(responseTokenVerify && responseTokenVerify.tokenValid){\n      this.setState({\n        isLoggedIn : responseTokenVerify.tokenValid,\n        username : responseTokenVerify.username\n      });\n    }\n  }\n  hideModal = () =>{\n    this.setState({\n      showLoginModal : false,\n      showAskQuestionModal : false,\n      showAnswerModal : false\n    })\n  }\n  showLoginModal = () => {\n    this.setState({\n      showLoginModal : true\n    })\n  }\n  showAskQuestionModal = () => {\n    this.setState({\n      showAskQuestionModal : true\n    })\n  }\n  showAnswerModal = () => {\n    this.setState({\n      showAnswerModal : true\n    })\n  }\n  handleLogout = ()=>{\n    this.setState({\n      isLoggedIn : false,\n      username : \"FAKE ACCOUNT\",\n      token : null\n    });\n    document.cookie.split(\";\").forEach((c) => {\n      document.cookie = c\n          .replace(/^ +/, \"\")\n          .replace(/=.*/, \"=;expires=\" + new Date().toUTCString() + \";path=/\");\n      });\n  }\n  handleLoginData = async (data) =>{\n    this.setState({\n      isLoggedIn : true,\n      username : data.username,\n      token : data.token,\n      showLoginModal : false\n    });\n    this.props.cookies.set('jwt',data.token,{ path: '/' });\n  }\n  handleAddAnswer = async ()=>{\n    if(this.state.isLoggedIn){\n      this.showAnswerModal();\n    }else{\n      this.showLoginModal();\n    }\n  }\n  handleNewQuestion = async () =>{\n    if(this.state.isLoggedIn){\n      this.showAskQuestionModal();\n    }else{\n      this.showLoginModal();\n    }\n  }\n  render(){\n      return (\n        <div>\n            <Router>\n            <Header hideModal = {()=>{this.hideModal()}} handleLogout={()=>{this.handleLogout()}} handleLogin={()=>{this.showLoginModal()}} userid={this.state.userid} handleNewQuestion={()=>{this.handleNewQuestion()}} username={this.state.username} isLoggedIn={this.state.isLoggedIn}/>\n            <div style={{marginTop:\"70px\"}} >\n                  <Switch>\n                      {/* <Route exact path=\"/\" render={(props)=>{\n                          return(  \n                            <All {...props}/>\n                          )\n                      }} /> */}\n                      <Route exact path=\"/\" render={(props)=>{\n                          return(\n                            <Search querytype={\"a\"}  {...props}/>\n                          )\n                      }} />\n                      <Route exact path=\"/s/q/:query\" render={(props)=>{\n                          return(\n                            <Search querytype={\"q\"}  {...props}/>\n                          )\n                      }} />\n                      <Route exact path=\"/s/u/:query\" render={(props)=>{\n                          return(\n                            <Search querytype={\"u\"}  {...props}/>\n                          )\n                      }} />\n\n                      <Route exact path=\"/error\" render={(props)=>{\n                          return(  \n                            <Error {...props}/>\n                          )\n                      }} />\n                      <Route exact path=\"/profile\" render={(props)=>{\n                          return(\n                            <Profile token={this.state.token} {...props}/>\n                          )\n                      }} />\n                      <Route path=\"/q/:quesid\"  render = {(props)=>{\n                        return (\n                          <div>\n                            <Question answerQuestion = {(e)=>{this.handleAddAnswer(e)}} token={this.state.token} {...props} userid = {this.state.userid} username = {this.state.username} isLoggedIn = {this.state.isLoggedIn} />\n                            <AddAnswer {...props} hideModal = {()=>{this.hideModal()}} token={this.state.token} showModal={this.state.showAnswerModal}/>\n                          </div>\n                        )\n                      }}\n                      />\n                  </Switch> \n                  <Login hideModal={()=>{this.hideModal()}} handleLoginData = {(e)=>{this.handleLoginData(e)}}  showModal={this.state.showLoginModal}/>\n                  <AskQuestion hideModal={()=>{this.hideModal()}} token = {this.state.token} showModal={this.state.showAskQuestionModal}/>\n            </div>\n          </Router>\n        </div>\n      )\n  }\n}\nvar AppWithCookies = withCookies(App);\nReactDOM.render(\n  <React.StrictMode>\n    <AppWithCookies />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}